@page "/login"
@using Byte.TalentScout.Client.Services
@using Byte.TalentScout.Domain.Extensions
@using Byte.TalentScout.Domain.ViewModels
@inject IAuthService AuthService
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager
@rendermode InteractiveServer


<h1>Login</h1>

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Please enter your details</h5>
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="login-form">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email address</label>
                <InputText Id="email" Class="form-control" @bind-Value="loginModel.Email" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" Class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>
</div>

@code {

    [SupplyParameterFromForm(FormName = "login-form")]
    private LoginViewModel loginModel { get; set; } = new();

    private bool ShowErrors;
    private string Error = "";
    private bool loginSucceeded = false;
    private string authToken;

    private async Task HandleLogin()
    {
        if (!loginModel.Password.IsNullOrEmpty() && !loginModel.Email.IsNullOrEmpty())
        {
            ShowErrors = false;
            var result = await AuthService.Login(loginModel);

            if (result.IsSuccessful())
            {
                authToken = result.AccessToken;
                loginSucceeded = true;
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ShowErrors = true;
                Error = "Login failed. Please check your credentials and try again.";
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await jsRuntime.InvokeVoidAsync("sessionStorageSetItem", "authToken", authToken);
    }
}
